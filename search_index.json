[["index.html", "Practical Smoothing, The Joys of P-splines  bookdown bookdown bookdown  ", " Practical Smoothing, The Joys of P-splines  2022-04-15  bookdown You can render the HTML version of this example book without changing anything: Find the Build pane in the RStudio IDE, and Click on Build Book, then select your output format, or select All formats if youd like to use multiple formats from the same book source files. bookdown::render_book() pdfbookdown::pdf_bookXeLaTeXTinyTeXhttps://yihui.org/tinytex/ bookdown bookdown::serve_book() bookdown RmdRmd Rindex.RmdRmdRindex.Rmd    Xie Yihui (2022), Books and Technical Documents with R Markdown, https://bookdown.org/yihui/bookdown  (2022), R, , https://www.math.pku.edu.cn/teachers/lidf/docs/Rbook/html/_Rbook/bookdown.html  (2022), R, , https://bookdown.org/wangminjie/R4DS/baseR-intro-ds.html, https://github.com/perlatex/R_for_Data_Science "],["Mixed-Model.html", "Chapter 1  1.1 1", " Chapter 1  1.1 1 CO2CO2CO23tree4area CO2 1.1.1  library(JOPSbook) library(gamair) library(magrittr) library(data.table) data(&quot;stomata&quot;) stomata %&lt;&gt;% data.table() summary(stomata) #&gt; area CO2 tree #&gt; Min. :0.8753 1:12 1:4 #&gt; 1st Qu.:1.5396 2:12 2:4 #&gt; Median :2.0166 3:4 #&gt; Mean :2.0679 4:4 #&gt; 3rd Qu.:2.7600 5:4 #&gt; Max. :3.1149 6:4 print(stomata) #&gt; area CO2 tree #&gt; 1: 1.6055739 1 1 #&gt; 2: 1.6300711 1 1 #&gt; 3: 1.5391189 1 1 #&gt; 4: 1.7187315 1 1 #&gt; 5: 1.3896163 1 2 #&gt; 6: 1.5858805 1 2 #&gt; 7: 1.4697276 1 2 #&gt; 8: 1.9493473 1 2 #&gt; 9: 1.5397020 1 3 #&gt; 10: 1.2436558 1 3 #&gt; 11: 0.8752505 1 3 #&gt; 12: 0.9932352 1 3 #&gt; 13: 3.1149370 2 4 #&gt; 14: 2.7402102 2 4 #&gt; 15: 2.4825228 2 4 #&gt; 16: 2.8192831 2 4 #&gt; 17: 2.8924475 2 5 #&gt; 18: 2.8622759 2 5 #&gt; 19: 2.8410755 2 5 #&gt; 20: 3.0183753 2 5 #&gt; 21: 2.6576575 2 6 #&gt; 22: 2.0839150 2 6 #&gt; 23: 2.2310707 2 6 #&gt; 24: 2.3464027 2 6 #&gt; area CO2 tree \\[ y_i = CO2 * _j + tree * _k + _i \\] iijCO2k m1 &lt;- lm(area ~ CO2 + tree, stomata) m0 &lt;- lm(area ~ CO2, stomata) anova(m0, m1) #&gt; Analysis of Variance Table #&gt; #&gt; Model 1: area ~ CO2 #&gt; Model 2: area ~ CO2 + tree #&gt; Res.Df RSS Df Sum of Sq F Pr(&gt;F) #&gt; 1 22 2.1348 #&gt; 2 18 0.8604 4 1.2744 6.6654 0.001788 ** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 anovatree m2 &lt;- lm(area ~ tree, stomata) anova(m2, m1) #&gt; Analysis of Variance Table #&gt; #&gt; Model 1: area ~ tree #&gt; Model 2: area ~ CO2 + tree #&gt; Res.Df RSS Df Sum of Sq F Pr(&gt;F) #&gt; 1 18 0.8604 #&gt; 2 18 0.8604 0 2.2204e-16 m2m1CO2CO2tree st = stomata[, .(area = mean(area)), .(tree, CO2)] st #&gt; tree CO2 area #&gt; 1: 1 1 1.623374 #&gt; 2: 2 1 1.598643 #&gt; 3: 3 1 1.162961 #&gt; 4: 4 2 2.789238 #&gt; 5: 5 2 2.903544 #&gt; 6: 6 2 2.329761 m3 &lt;- lm(area ~ CO2, st) summary(m3) #&gt; #&gt; Call: #&gt; lm(formula = area ~ CO2, data = st) #&gt; #&gt; Residuals: #&gt; 1 2 3 4 5 6 #&gt; 0.1617 0.1370 -0.2987 0.1151 0.2294 -0.3444 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) 1.4617 0.1629 8.970 0.000855 *** #&gt; CO22 1.2125 0.2304 5.262 0.006247 ** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Residual standard error: 0.2822 on 4 degrees of freedom #&gt; Multiple R-squared: 0.8738, Adjusted R-squared: 0.8422 #&gt; F-statistic: 27.69 on 1 and 4 DF, p-value: 0.006247 # anova(m3) summary(m3)$sigma^2 - summary(m1)$sigma^2 / 4 #&gt; [1] 0.06770177 "],["p-spline.html", "Chapter 2 P-Spline 2.1 mixed model", " Chapter 2 P-Spline 2.1 mixed model # library(JOPS) # library(ggplot2) library(gridExtra) library(MASS) # P-spline fit using mixed model and fast Harville algorithm # A graph in the book &#39;Practical Smoothing. The Joys of P-splines&#39; # Paul Eilers and Brian Marx, 2019 # Get the data data(mcycle) x = mcycle$times y = mcycle$accel m = length(y) mmin = min(x) mmax = max(x) # Set P-spline parameters nseg = 20 pord = 2 bdeg = 3 # Compute basis matrix and inner products B = bbase(x, bdeg = bdeg, nseg = nseg) n = ncol(B) D = diff(diag(n), diff = 2) P = t(D) %*% D BtB = t(B) %*% B Bty = t(B) %*% y lambda = 1 for (it in 1:10) { G = BtB + lambda * P a = solve(G, Bty) mu = B %*% a r = y - mu H = solve(G, BtB) ed = sum(diag(H)) sig2 = sum(r ^ 2) / (m - ed) tau2 = sum((D %*% a) ^ 2) / ed lanew = sig2 / tau2 dla = (lanew - lambda) / lambda lambda = lanew cat(it, ed, dla, &quot;\\n&quot;) } #&gt; 1 10.52137 -0.4784859 #&gt; 2 11.79696 -0.08083044 #&gt; 3 11.96895 -0.00640244 #&gt; 4 11.98211 -0.0004611875 #&gt; 5 11.98306 -3.298502e-05 #&gt; 6 11.98312 -2.357948e-06 #&gt; 7 11.98313 -1.685527e-07 #&gt; 8 11.98313 -1.204859e-08 #&gt; 9 11.98313 -8.612642e-10 #&gt; 10 11.98313 -6.156593e-11 xg = seq(min(x), max(x), length = 200) Bg = bbase(xg, bdeg = 3, nseg = nseg) yg = Bg %*% a titl = bquote(&quot;HFS algorithm:&quot; ~ lambda == .(round(lambda, 2))) # Make the plot F1 = data.frame(x,y) F2 = data.frame(xg1 = xg, yg1 = yg) ggplot(F1, aes(x = x, y = y)) + geom_point(data = F1, size = 1.5, color = &quot;darkgray&quot;) + geom_line(aes(x = xg1, y = yg1), data = F2, size = 1, colour = I(&quot;blue&quot;), lty = 1) + xlab(&quot;Time (ms)&quot;) + ylab(&quot;Acceleration (g)&quot;) + ggtitle(titl) + JOPS_theme() # Plots and save graphs # graphics.off() # grid.arrange(plt1, ncol = 1, nrow = 1) "],["multidimensional-smoothing.html", "Chapter 3 Multidimensional Smoothing 3.1 Figure 4.1 3.2 Figure 4.2 3.3 Figure 4.8 3.4 Figure 4.9 3.5 Figure 4.10 3.6 Figure 4.11", " Chapter 3 Multidimensional Smoothing  3.1 Figure 4.1 # GAM smoothing (Ethanol data) # A graph in the book &#39;Practical Smoothing. The Joys of P-splines&#39; # Paul Eilers and Brian Marx, 2019 library(ggplot2) library(SemiPar) library(gridExtra) library(JOPS) # Get the data data(ethanol) # Basis matrix for compression ratio (C) clo = 7.5 chi = 18 ngrid = 50 B1 = bbase(ethanol$C, clo, chi) # Basis matrix for equivalenc ratio (E) elo = 0.5 ehi = 1.25 B2 = bbase(ethanol$E, elo, ehi) # Penalty matrix n = ncol(B1) D = diff(diag(n), diff = 2) r1 = 1:n r2 = r1 + n lambdas = c(1, 0.1) P = kronecker(diag(lambdas), t(D) %*% D) P = P + diag(2 * n) * 1e-06 # Fit the model B = cbind(B1, B2) y = ethanol$NOx a = solve(t(B) %*% B + P, t(B) %*% y) mu = B %*% a cat(&#39;SD of residuals:&#39;, sd(y - mu), &#39;\\n&#39;) #&gt; SD of residuals: 0.2242995 # Add fitted components to data frame (for ggplot) Fmod = ethanol Fmod$f1 = B1 %*% a[r1] Fmod$f2 = B2 %*% a[r2] # Model fit on fine grid cgrid = seq(clo, chi, length = ngrid) Bg1 = bbase(cgrid, clo, chi) egrid = seq(elo, ehi, length = ngrid) Bg2 = bbase(egrid, elo, ehi) zc = Bg1 %*% a[r1] ze = Bg2 %*% a[r2] # Fill data frames for ggplot Fc = data.frame(cgrid, zc) Fe = data.frame(egrid, ze) # Create plots plt1 = ggplot(aes(x = C, y = E), data = ethanol) + geom_point(color = &quot;darkgrey&quot;) + xlab(&quot;Compression ratio (C)&quot;) + ylab(&quot;Equivalence ratio (E)&quot;) + ggtitle(&quot;Experiment design&quot;) + JOPS_theme() plt2 = ggplot(aes(x = E, y = NOx - f1), data = Fmod) + geom_point(color = &quot;darkgrey&quot;) + geom_line(aes(x = egrid, y = ze), data = Fe, size = 1, color = &quot;blue&quot;) + xlab(&quot;Equivalence ratio&quot;) + ylab(&quot;Partial residuals&quot;) + ggtitle(&quot;Partial response&quot;) + JOPS_theme() plt3 = ggplot(aes(x = C, y = NOx - f2), data = Fmod) + geom_point(color = &quot;darkgrey&quot;) + geom_line(aes(x = cgrid, y = zc), data = Fc, color = &quot;blue&quot;, size = 1) + xlab(&quot;Compression ratio (C)&quot;) + ylab(&quot;Partial residuals&quot;) + ggtitle(&quot;Partial response&quot;) + JOPS_theme() plt4 = ggplot(aes(x = f1 + f2, y = NOx), data = Fmod) + geom_point(color = &quot;darkgrey&quot;) + geom_abline(slope = 1, intercept = 0, color = &quot;blue&quot;, size = 1) + xlab(&quot;Fitted NOx&quot;) + ylab(&quot;Observed &quot;) + ggtitle(&quot;Compare fit to data&quot;) + JOPS_theme() # Make and save pdf grid.arrange(plt1, plt2, plt3, plt4, ncol = 2, nrow = 2) 3.2 Figure 4.2 library(SemiPar) library(reshape2) #&gt; #&gt; Attaching package: &#39;reshape2&#39; #&gt; The following objects are masked from &#39;package:data.table&#39;: #&gt; #&gt; dcast, melt # library(ggplot2) # library(JOPS) # library(metR) require2(metR) #&gt; Loading required package: metR # Image of GAM surface (Ethanol data) # A graph in the book &#39;Practical Smoothing. The Joys of P-splines&#39; # Paul Eilers and Brian Marx, 2019 # Get the data data(ethanol) # Basis matrix for compression ratio (C) clo = 7.5 chi = 18 ngrid = 50 B1 = bbase(ethanol$C, clo, chi) # Basis matrix for equivalenc ratio (E) elo = 0.5 ehi = 1.25 B2 = bbase(ethanol$E, elo, ehi) # Penalty matrix n = ncol(B1) D = diff(diag(n), diff = 2) r1 = 1:n r2 = r1 + n lambdas = c(1, 0.1) P = kronecker(diag(lambdas), t(D) %*% D) P = P + diag(2 * n) * 1e-06 # Fit the model B = cbind(B1, B2) y = ethanol$NOx a = solve(t(B) %*% B + P, t(B) %*% y) mu = B %*% a cat(&#39;SD of residuals:&#39;, sd(y - mu), &#39;\\n&#39;) #&gt; SD of residuals: 0.2242995 # Add fitted components to data frame (for ggplot) Fmod = ethanol Fmod$f1 = B1 %*% a[r1] Fmod$f2 = B2 %*% a[r2] # Model fit on fine grid cgrid = seq(clo, chi, length = ngrid) Bg1 = bbase(cgrid, clo, chi) egrid = seq(elo, ehi, length = ngrid) Bg2 = bbase(egrid, elo, ehi) zc = Bg1 %*% a[r1] ze = Bg2 %*% a[r2] Fit = outer(c(zc), c(ze), &quot;+&quot;) # Fill data frames for ggplot Fc = data.frame(cgrid, zc) Fe = data.frame(egrid, ze) # Data frame for plotting data points with signs of residuals x = ethanol$C y = ethanol$E z = ethanol$NOx cols = c(&quot;blue&quot;, &quot;yellow&quot;)[(z &gt; mu) + 1] pchs = c(&quot;+&quot;, &quot;-&quot;)[(z &gt; mu) + 1] Data = data.frame(x = x, y = y, cols = cols, pchs = pchs, NOx = z) # Turn matrix into a &quot;long&quot; data frame Mu = Fit rownames(Mu) = cgrid colnames(Mu) = egrid dens &lt;- melt(Mu) names(dens) = c(&#39;x&#39;, &#39;y&#39;, &#39;NOx&#39;) # Plot fit with contours sl = T ccol = &#39;blue&#39; plt = ggplot(dens, aes(x, y, fill = NOx)) + geom_raster(show.legend = sl) + scale_fill_gradientn(colours = terrain.colors(100))+ geom_contour(data = dens, aes(z = NOx), color = ccol, show.legend = T) + geom_text_contour(aes(z = NOx), color = ccol, size = 3) + ylab(&#39;Equivalence ratio&#39;) + xlab(&#39;Compression ratio&#39;) + ggtitle(&quot;GAM for NOx emission, ethanol data&quot;) + geom_point(data = Data, aes(x =x, y = y), shape = pchs, size = 5) + JOPS_theme() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), plot.title = element_text(size = 16), axis.title.x = element_text(size = 16), axis.title.y = element_text(size = 16)) print(plt) 3.3 Figure 4.8 library(SemiPar) library(fields) library(spam) library(JOPS) library(JOPSbook) Tensor product P-spline fit (Ethanol data). A graph in the book Practical Smoothing. The Joys of P-splines. Paul Eilers and Brian Marx, 2019 func &lt;- function(x, y, range, yseg = 10, xseg = 10, deg = 3, u = NULL, v = NULL, lambda = c(1, 0.1), plot = TRUE, ...) { if (is.null(u)) u &lt;- seq(range[1], range[2], length = length(x)) if (is.null(v)) v &lt;- seq(range[3], range[4], length = length(y)) xpars &lt;- c(range[1], range[2], xseg, deg) ypars &lt;- c(range[3], range[4], yseg, deg) # Compute one-dimensional base Bx &lt;- bbase(x, xpars[1], xpars[2], xpars[3], xpars[4]) By &lt;- bbase(y, ypars[1], ypars[2], ypars[3], ypars[4]) nx = ncol(Bx) ny = ncol(By) # Compute tensor products B1 = kronecker(t(rep(1, ny)), Bx) B2 = kronecker(By, t(rep(1, nx))) B = B1 * B2 n = ncol(B) # Compute penalty matrices Dx = diff(diag(nx), diff = 2) Dy = diff(diag(ny), diff = 2) delta = 1e-10 Px = kronecker(diag(ny), t(Dx) %*% Dx + delta * diag(nx)) Py = kronecker(t(Dy) %*% Dy + delta * diag(ny), diag(nx)) E = diag(n) # Fit the model lambdax = 1 lambday = 0.1 a = solve(t(B) %*% B + lambdax * Px + lambday * Py, t(B) %*% z) zhat = B %*% a r = z - zhat cat(&quot;SD of residuals:&quot;, sd(r), &quot;\\n&quot;) # Compute grid for predicted surface Bgx &lt;- bbase(u, xpars[1], xpars[2], xpars[3], xpars[4]) Bgy &lt;- bbase(v, ypars[1], ypars[2], ypars[3], ypars[4]) A &lt;- matrix(a, nx, ny) Fit &lt;- Bgx %*% A %*% t(Bgy) if (plot) { # Plot result and data cols &lt;- c(&quot;blue&quot;, &quot;red&quot;)[(z &gt; zhat) + 1] pchs &lt;- c(&quot;+&quot;, &quot;-&quot;)[(z &gt; zhat) + 1] image.plot(u, v, Fit, col = terrain.colors(100) # xlab = &quot;Compression ratio&quot;, # ylab = &quot;Equivalence ratio&quot; ) contour(u, v, Fit, add = T, col = &quot;steelblue&quot;, labcex = 0.7) points(x, y, pch = pchs, col = &quot;blue&quot;, cex = 1.1, ) # title(&quot;2D P-splines for NOx emission, ethanol data&quot;, cex.main = 1) } listk(u, v, Fit) } # Get the data data(ethanol) str(ethanol) #&gt; &#39;data.frame&#39;: 88 obs. of 3 variables: #&gt; $ NOx: num 3.74 2.29 1.5 2.88 0.76 ... #&gt; $ C : num 12 12 12 12 12 9 9 9 12 12 ... #&gt; $ E : num 0.907 0.761 1.108 1.016 1.189 ... m &lt;- nrow(ethanol) x &lt;- ethanol$C y &lt;- ethanol$E z &lt;- ethanol$NOx range &lt;- c(7, 19, 0.5, 1.25) r &lt;- func(x, y, range) #&gt; SD of residuals: 0.1683194 3.4 Figure 4.9 # Tensor product P-spline fit and extrapolation (Ethanol data) # A graph in the book &#39;Practical Smoothing. The Joys of P-splines&#39; # Paul Eilers and Brian Marx, 2019 library(SemiPar) library(fields) library(JOPS) # simulate data m = 200 set.seed(2017) x = 2 * (runif(m) - 0.5) y = 2 * (runif(m) - 0.5) z = exp(-x^2 - y^2)^2 + rnorm(m) * 0.1 sel = x &gt; -0 | y &gt; -0 m = length(x) # Set parameters for domain xlo &lt;- -1 xhi &lt;- 1 ylo &lt;- -1 yhi &lt;- 1 # Set P-spline parameters, fit and compute surface xseg &lt;- 10 xdeg &lt;- 3 xpars &lt;- c(xlo, xhi, xseg, xdeg) yseg &lt;- 20 ydeg &lt;- 3 ypars &lt;- c(ylo, yhi, yseg, ydeg) # Compute basis Bx = bbase(x, xpars[1], xpars[2], xpars[3], xpars[4]) By = bbase(y, ypars[1], ypars[2], ypars[3], ypars[4]) nx = ncol(Bx) ny = ncol(By) # Compute tensor products B1 &lt;- kronecker(t(rep(1, ny)), Bx) B2 &lt;- kronecker(By, t(rep(1, nx))) B &lt;- B1 * B2 # B = as.spam(B * (abs(B) &gt; 1e-5)) n = ncol(B) BtB = t(B) %*% B Btz = t(B) %*% z # Compute penalty matrices Dx = diff(diag(nx), diff = 2) Dy = diff(diag(ny), diff = 2) delta = 1e-10 Px = kronecker(diag(ny), t(Dx) %*% Dx) Py = kronecker(t(Dy) %*% Dy, diag(nx)) E = diag(n) lambda1 = lambda2 = 1 a = solve(BtB + lambda1 * Px + lambda2 * Py, Btz) zhat = B %*% a # Compute grid for predicted surface nu &lt;- 50 nv &lt;- 50 u &lt;- seq(xlo, xhi, length = nu) v &lt;- seq(ylo, yhi, length = nv) Bgx = bbase(u, xpars[1], xpars[2], xpars[3], xpars[4]) Bgy = bbase(v, ypars[1], ypars[2], ypars[3], ypars[4]) A = matrix(a, nx, ny) Fit = Bgx %*% A %*% t(Bgy) par(mfcol = c(1, 2), mar = c(3, 3, 2, 1), mgp = c(1.6, 0.8, 0)) # Plot result and data cols = c(&quot;blue&quot;, &quot;red&quot;)[(z &gt; zhat) + 1] pchs = c(&quot;+&quot;, &quot;-&quot;)[(z &gt; zhat) + 1] image.plot(u, v, Fit, col = terrain.colors(100), xlab = &quot;&quot;, ylab = &quot;&quot;, horizontal = T, legend.width = 0.7, cex = 0.8, legend.cex = 0.7, cex.axis = 0.8) contour(u, v, Fit, add = T, col = &quot;steelblue&quot;) points(x, y, pch = pchs, col = &quot;blue&quot;, cex = 1.1) x = x[sel] y = y[sel] z = z[sel] m = length(x) # Compute basis Bx = bbase(x, xpars[1], xpars[2], xpars[3], xpars[4]) By = bbase(y, ypars[1], ypars[2], ypars[3], ypars[4]) nx = ncol(Bx) ny = ncol(By) # Compute tensor products B1 &lt;- kronecker(t(rep(1, ny)), Bx) B2 &lt;- kronecker(By, t(rep(1, nx))) B &lt;- B1 * B2 # B = as.spam(B * (abs(B) &gt; 1e-5)) n = ncol(B) BtB = t(B) %*% B Btz = t(B) %*% z lambda1 = lambda2 = 3 a = solve(BtB + lambda1 * Px + lambda2 * Py, Btz) zhat = B %*% a A = matrix(a, nx, ny) Fit = Bgx %*% A %*% t(Bgy) # Plot result and data cols = c(&quot;blue&quot;, &quot;red&quot;)[(z &gt; zhat) + 1] pchs = c(&quot;+&quot;, &quot;-&quot;)[(z &gt; zhat) + 1] image.plot(u, v, Fit, col = terrain.colors(100), xlab = &quot;&quot;, ylab = &quot;&quot;, horizontal = T, legend.width = 0.7) contour(u, v, Fit, add = T, col = &quot;steelblue&quot;, labcex = 0.7) points(x, y, pch = pchs, col = &quot;blue&quot;, cex = 1.1) 3.5 Figure 4.10 # Smoothing ring image with array regression (Simulated data) # A graph in the book &#39;Practical Smoothing. The Joys of P-splines&#39; # Paul Eilers and Brian Marx, 2019 library(ggplot2) library(JOPS) library(fields) # Simulate the rings nx = 500 ny = 500 x = seq(-1, 1, length = nx) y = seq(-1, 1, length = ny) ex = rep(1, nx) ey = rep(1, ny) X = outer(x, ey) Y = outer(ex, y) R1 = sqrt((X - 0.3)^2 + (Y - 0.3)^2) R2 = sqrt((X + 0.2)^2 + (Y + 0.2)^2) R3 = sqrt((X - 0.7)^2 + (Y + 0.7)^2) R4 = sqrt((X + 0.7)^2 + (Y - 0.7)^2) Z1 = exp(-50 * (R1 - 0.4)^2) Z2 = exp(-50 * (R2 - 0.6)^2) Z3 = exp(-50 * (R3 - 0.2)^2) Z4 = exp(-50 * (R4 - 0.2)^2) Z = pmax(pmax(pmax(Z1, Z2), Z3), Z4) # Add noise set.seed(2019) Z = Z + matrix(rnorm(nx * nx), nx, ny) # Prepare bases Bx = bbase(x, nseg = 20) By = bbase(y, nseg = 20) nbx = ncol(Bx) nby = ncol(By) # Prpare the penalty matrices Dx = diff(diag(nbx), diff = 2) Dy = diff(diag(nby), diff = 2) lambdax = lambday = 1 Px = lambdax * t(Dx) %*% Dx Py = lambday * t(Dy) %*% Dy P = kronecker(Py, diag(nbx)) + kronecker(diag(nby), Px) # Do the smoothing, using the array algorithm W = 0 * Z + 1 Tx = rowtens(Bx) Ty = rowtens(By) Q = t(Tx) %*% W %*% Ty dim(Q) = c(nbx, nbx, nby, nby) Q = aperm(Q, c(1, 3, 2, 4)) dim(Q) = c(nbx * nby, nbx * nby) r = t(Bx) %*% (Z * W) %*% By dim(r) = c(nbx * nby, 1) A = solve(Q + P, r) dim(A) = c(nbx, nby) Zhat = Bx %*% A %*% t(By) # Prepare images/plots cols = gray(seq(0, 1, by = 0.01)) par(mfrow = c(1, 2), mar = c(1, 1, 2, 1)) image(x, y, Z, col = cols, xlab = &quot;&quot;, ylab = &quot;&quot;, xaxt = &quot;n&quot;, yaxt = &quot;n&quot;) title(&quot;Data&quot;, cex.main = 1.5) image(x, y, Zhat, col = cols, xlab = &quot;&quot;, ylab = &quot;&quot;, xaxt = &quot;n&quot;, yaxt = &quot;n&quot;) title(&quot;Smoothed&quot;, cex.main = 1.5) 3.6 Figure 4.11 # Smoothing scattered data with 2D P-splines (Simulated data) # A graph in the book &#39;Practical Smoothing. The Joys of P-splines&#39; # Paul Eilers and Brian Marx, 2019 library(ggplot2) library(JOPS) library(fields) # Simulate the rings nx = 200 ny = 200 x = seq(-1, 1, length = nx) y = seq(-1, 1, length = ny) ex = rep(1, nx) ey = rep(1, ny) X = outer(x, ey) Y = outer(ex, y) R1 = sqrt((X - 0.3)^2 + (Y - 0.3)^2) R2 = sqrt((X + 0.2)^2 + (Y + 0.2)^2) R3 = sqrt((X - 0.7)^2 + (Y + 0.7)^2) R4 = sqrt((X + 0.7)^2 + (Y - 0.7)^2) Z1 = exp(-50 * (R1 - 0.4)^2) Z2 = exp(-50 * (R2 - 0.6)^2) Z3 = exp(-50 * (R3 - 0.2)^2) Z4 = exp(-50 * (R4 - 0.2)^2) Z = pmax(pmax(pmax(Z1, Z2), Z3), Z4) + 0.3 # Prepare bases Bx = bbase(x, nseg = 20) By = bbase(y, nseg = 20) nbx = ncol(Bx) nby = ncol(By) # Prpare the penalty matrices Dx = diff(diag(nbx), diff = 3) Dy = diff(diag(nby), diff = 3) lambdax = lambday = 0.1 Px = lambdax * t(Dx) %*% Dx Py = lambday * t(Dy) %*% Dy P = kronecker(Py, diag(nbx)) + kronecker(diag(nby), Px) # Do the smoothing, using the array algorithm W = matrix(runif(nx * ny) &lt; 0.01, nx, ny) Tx = rowtens(Bx) Ty = rowtens(By) Q = t(Tx) %*% W %*% Ty dim(Q) = c(nbx, nbx, nby, nby) Q = aperm(Q, c(1, 3, 2, 4)) dim(Q) = c(nbx * nby, nbx * nby) r = t(Bx) %*% (Z * W) %*% By dim(r) = c(nbx * nby, 1) A = solve(Q + P, r) dim(A) = c(nbx, nby) Zhat = Bx %*% A %*% t(By) # Make and save plots cols = gray(seq(0, 1, by = 0.01)) par(mfrow = c(1, 2), mar = c(1, 1, 2, 1)) image(x, y, Z * W, col = cols, xlab = &quot;&quot;, ylab = &quot;&quot;, xaxt = &quot;n&quot;, yaxt = &quot;n&quot;) title(&quot;Data&quot;, cex.main = 1.5) image(x, y, Zhat, col = cols, xlab = &quot;&quot;, ylab = &quot;&quot;, xaxt = &quot;n&quot;, yaxt = &quot;n&quot;) title(&quot;Smoothed&quot;, cex.main = 1.5) "],["appendix.html", "Chapter 4 Appendix", " Chapter 4 Appendix Figure E.1: # Plots for optimal smoothing (Old Faithful geyser data) # A graph in the book &#39;Practical Smoothing. The Joys of P-splines&#39; # Paul Eilers and Brian Marx, 2019 library(ggplot2) library(gridExtra) library(JOPS) library(MASS) # Get the data data(faithful) u = faithful[, 1] # Eruption length bw1 = 0.05 brks1 = seq(0, 6, by = bw1) h = hist(u, breaks = brks1, plot = F) x = h$mids y = h$counts Data = data.frame(x = x, y = y) Dat = data.frame(u = u) nseg = 20 lambda = 1 d = 3 # Iterative Poisson smoothing, updating tuning based on diff of coeffs aics = NULL for (it in 1:20) { fit = psPoisson(x, y, nseg = nseg, pord = d, lambda = lambda, show = F) a = fit$pcoef vr = sum((diff(a, diff = d))^2)/fit$effdim lambda_new = 1/vr dla = abs((lambda_new - lambda)/lambda) lambda = lambda_new cat(it, log10(lambda), &quot;\\n&quot;) if (dla &lt; 1e-05) break } #&gt; 1 0.04461179 #&gt; 2 0.06014879 #&gt; 3 0.06558028 #&gt; 4 0.06748256 #&gt; 5 0.06814927 #&gt; 6 0.068383 #&gt; 7 0.06846495 #&gt; 8 0.06849368 #&gt; 9 0.06850375 #&gt; 10 0.06850728 # Gridded data for plotting Fit1 = data.frame(x = fit$xgrid, y = fit$mugrid) plt1 = ggplot(Dat, aes(u)) + geom_histogram(fill = &quot;wheat3&quot;, breaks = brks1)+ geom_hline(yintercept = 0) + xlab(&quot;Eruption length (min.)&quot;) + ylab(&quot;Frequency&quot;) + ggtitle(paste(&quot;Old Faithtful; mixed model smooth; bin width&quot;, bw1, &quot;min.&quot;)) + geom_line(data = Fit1, aes(x = x, y = y), col = &quot;steelblue&quot;, size = 1) + JOPS_theme() # Second histogram bw2 = 0.02 brks2 = seq(0, 6, by = bw2) h = hist(u, breaks = brks2, plot = F) x = h$mids y = h$counts Data = data.frame(x = x, y = y) nseg = 20 lambda = 1 d = 3 # Iterative Poisson smoothing, HFS tuning of lambda aics = NULL for (it in 1:20) { fit = psPoisson(x, y, nseg = nseg, pord = d, lambda = lambda, show = F) a = fit$pcoef vr = sum((diff(a, diff = d)) ^ 2) / fit$effdim lambda_new = 1 / vr dla = abs((lambda_new - lambda) /lambda) lambda = lambda_new cat(it, log10(lambda), &#39;\\n&#39;) if (dla &lt; 1e-5) break } #&gt; 1 0.02176114 #&gt; 2 0.02987864 #&gt; 3 0.03290564 #&gt; 4 0.03403444 #&gt; 5 0.03445539 #&gt; 6 0.03461238 #&gt; 7 0.03467092 #&gt; 8 0.03469275 #&gt; 9 0.03470089 #&gt; 10 0.03470393 # Gridded data for plotting Fit1 = data.frame(x = fit$xgrid, y = fit$mugrid) plt2 = ggplot(Dat, aes(u)) + geom_histogram(fill = &quot;wheat3&quot;, breaks = brks2)+ geom_hline(yintercept = 0) + xlab(&quot;Eruption length (min.)&quot;) + ylab(&quot;Frequency&quot;) + ggtitle(paste(&quot;Old Faithtful; mixed model smooth; bin width&quot;, bw2, &quot;min.&quot;)) + geom_line(data = Fit1, aes(x = x, y = y), col = &quot;steelblue&quot;, size = 1) + JOPS_theme() # Make and save graph grid.arrange(plt2, plt1, nrow = 2, ncol = 1) "],["cross.html", "Chapter 5 Cross-references 5.1 Chapters and sub-chapters 5.2 Captioned figures and tables", " Chapter 5 Cross-references Cross-references make it easier for your readers to find and link to elements in your book. 5.1 Chapters and sub-chapters There are two steps to cross-reference any heading: Label the heading: # Hello world {#nice-label}. Leave the label off if you like the automated heading generated based on your heading title: for example, # Hello world = # Hello world {#hello-world}. To label an un-numbered heading, use: # Hello world {-#nice-label} or {# Hello world .unnumbered}. Next, reference the labeled heading anywhere in the text using \\@ref(nice-label); for example, please see Chapter 5. If you prefer text as the link instead of a numbered reference use: any text you want can go here. 5.2 Captioned figures and tables Figures and tables with captions can also be cross-referenced from elsewhere in your book using \\@ref(fig:chunk-label) and \\@ref(tab:chunk-label), respectively. See Figure 5.1. par(mar = c(4, 4, .1, .1)) plot(pressure, type = &#39;b&#39;, pch = 19) Figure 5.1: Here is a nice figure! Dont miss Table 5.1. knitr::kable( head(pressure, 10), caption = &#39;Here is a nice table!&#39;, booktabs = TRUE ) Table 5.1: Here is a nice table! temperature pressure 0 0.0002 20 0.0012 40 0.0060 60 0.0300 80 0.0900 100 0.2700 120 0.7500 140 1.8500 160 4.2000 180 8.8000 "],["parts.html", "Chapter 6 Parts", " Chapter 6 Parts You can add parts to organize one or more book chapters together. Parts can be inserted at the top of an .Rmd file, before the first-level chapter heading in that same file. Add a numbered part: # (PART) Act one {-} (followed by # A chapter) Add an unnumbered part: # (PART\\*) Act one {-} (followed by # A chapter) Add an appendix as a special kind of un-numbered part: # (APPENDIX) Other stuff {-} (followed by # A chapter). Chapters in an appendix are prepended with letters instead of numbers. "],["footnotes-and-citations.html", "Chapter 7 Footnotes and citations 7.1 Footnotes 7.2 Citations", " Chapter 7 Footnotes and citations 7.1 Footnotes Footnotes are put inside the square brackets after a caret ^[]. Like this one.1 7.2 Citations Reference items in your bibliography file(s) using @key. For example, we are using the bookdown package (Xie 2022) (check out the last code chunk in index.Rmd to see how this citation key was added) in this sample book, which was built on top of R Markdown and knitr (Xie 2015) (this citation was added manually in an external file book.bib). Note that the .bib files need to be listed in the index.Rmd with the YAML bibliography key. The RStudio Visual Markdown Editor can also make it easier to insert citations: https://rstudio.github.io/visual-markdown-editing/#/citations References "],["blocks.html", "Chapter 8 Blocks 8.1 Equations 8.2 Theorems and proofs 8.3 Callout blocks", " Chapter 8 Blocks 8.1 Equations Here is an equation. \\[\\begin{equation} f\\left(k\\right) = \\binom{n}{k} p^k\\left(1-p\\right)^{n-k} \\tag{8.1} \\end{equation}\\] You may refer to using \\@ref(eq:binom), like see Equation (8.1). 8.2 Theorems and proofs Labeled theorems can be referenced in text using \\@ref(thm:tri), for example, check out this smart theorem 8.1. Theorem 8.1 For a right triangle, if \\(c\\) denotes the length of the hypotenuse and \\(a\\) and \\(b\\) denote the lengths of the other two sides, we have \\[a^2 + b^2 = c^2\\] Read more here https://bookdown.org/yihui/bookdown/markdown-extensions-by-bookdown.html. 8.3 Callout blocks The R Markdown Cookbook provides more help on how to use custom blocks to design your own callouts: https://bookdown.org/yihui/rmarkdown-cookbook/custom-blocks.html "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
